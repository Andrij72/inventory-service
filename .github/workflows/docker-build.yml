name: Build & Test Inventory Service

on:
  push:
    branches:
      - develop
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/inventory-service

jobs:
  # ---------------------------
  # Unit & Integration Tests
  # ---------------------------
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.32
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.ROOT_MYSQL_PASS }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASS }}
          MYSQL_DATABASE: inventory_service
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -p"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run unit + integration tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/inventory_service?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASS }}
        run: mvn clean verify
      - name: Build jar (skip tests)
        run: mvn clean package -DskipTests

  # ---------------------------
  # Docker Build & Push (Develop)
  # ---------------------------
  docker-develop:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build & Push Docker image (dev)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:dev-latest
            ${{ env.DOCKER_IMAGE }}:dev-${{ env.SHORT_SHA }}

  # ---------------------------
  # Docker Build & Push (Main)
  # ---------------------------
  docker-main:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build & Push Docker image (latest)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.SHORT_SHA }}

  # ---------------------------
  # Docker Build & Push (Release)
  # ---------------------------
  docker-release:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Extract short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Build & Push Docker image (tagged release)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}
            ${{ env.DOCKER_IMAGE }}:${{ env.SHORT_SHA }}

  # ---------------------------
  # E2E Tests
  # ---------------------------
  e2e-tests:
    runs-on: ubuntu-latest
    needs: docker-develop
    env:
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
      MYSQL_ROOT_PASS: ${{ secrets.ROOT_MYSQL_PASS }}
      MYSQL_DATABASE: inventory_service

    services:
      mysql:
        image: mysql:8.0.32
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.ROOT_MYSQL_PASS }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASS }}
          MYSQL_DATABASE: inventory_service
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Pull Inventory Service image
        run: docker pull ${{ env.DOCKER_IMAGE }}:dev-latest

      - name: Run Inventory Service container
        run: |
          docker run -d --name inventory-service \
            -p 8082:8082 \
            -e SPRING_PROFILES_ACTIVE=docker \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/inventory_service \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASS }} \
            --network ${{ job.services.mysql.network }} \
            ${{ env.DOCKER_IMAGE }}:dev-latest

      - name: Wait for service to be ready
        run: |
          for i in {1..30}; do
            curl -s http://localhost:8082/actuator/health && break
            echo "Waiting for service..."
            sleep 5
          done

      - name: Run API tests
        run: |
          curl -v "http://localhost:8082/api/v1/inventory?skuCode=iphone_15&quantity=3" || exit 1
